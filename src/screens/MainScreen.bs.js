// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Spacer from "../components/Spacer.bs.js";
import * as SharedStyles from "../SharedStyles.bs.js";
import * as ReactNative from "react-native";
import * as LoadingScreen from "./LoadingScreen.bs.js";
import * as ExpoLinearGradient from "expo-linear-gradient";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query GetUser($id: ID!)  {
    getUser(id: $id)  {
      __typename
      id
      title
    }
  }
`);

function parse(value) {
  var value$1 = value.getUser;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.title;
    tmp = {
      __typename: value$1.__typename,
      id: value$1.id,
      title: !(value$2 == null) ? value$2 : undefined
    };
  }
  return {
          getUser: tmp
        };
}

function serialize(value) {
  var value$1 = value.getUser;
  var getUser;
  if (value$1 !== undefined) {
    var value$2 = value$1.title;
    var title = value$2 !== undefined ? value$2 : null;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    getUser = {
      __typename: value$4,
      id: value$3,
      title: title
    };
  } else {
    getUser = null;
  }
  return {
          getUser: getUser
        };
}

function serializeVariables(inp) {
  return {
          id: inp.id
        };
}

function makeVariables(id, param) {
  return {
          id: id
        };
}

var GetUser_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var GetUser_refetchQueryDescription = include.refetchQueryDescription;

var GetUser_useLazy = include.useLazy;

var GetUser_useLazyWithVariables = include.useLazyWithVariables;

var GetUser = {
  GetUser_inner: GetUser_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: GetUser_refetchQueryDescription,
  use: use,
  useLazy: GetUser_useLazy,
  useLazyWithVariables: GetUser_useLazyWithVariables
};

var styles = ReactNative.StyleSheet.create({
      gradient: {
        flex: 1
      },
      container: {},
      text: {
        color: "#eee",
        fontSize: 22,
        fontWeight: "500"
      }
    });

function MainScreen(Props) {
  var query = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          id: "e5ca065a-dc7b-4a49-a0cb-eb0a6aa1736d"
        }
      ]);
  var match = query.data;
  if (query.loading) {
    return React.createElement(LoadingScreen.make, {});
  }
  if (match === undefined) {
    return "Error";
  }
  var getUser = match.getUser;
  var tmp;
  if (getUser !== undefined) {
    var t = getUser.title;
    tmp = t !== undefined ? t : "";
  } else {
    tmp = "";
  }
  return React.createElement(ExpoLinearGradient.LinearGradient, {
              colors: [
                SharedStyles.colors.main,
                SharedStyles.colors.secondary
              ],
              style: styles.gradient,
              start: [
                0.0,
                1.0
              ],
              end: [
                1.0,
                0.0
              ],
              children: React.createElement(ReactNative.View, {
                    style: ReactNative.StyleSheet.flatten([
                          SharedStyles.styles.container,
                          styles.container
                        ]),
                    children: null
                  }, React.createElement(Spacer.make, {
                        size: /* Size */{
                          _0: /* Large */2
                        }
                      }), React.createElement(ReactNative.Text, {
                        style: SharedStyles.styles.title,
                        children: tmp
                      }))
            });
}

var make = MainScreen;

export {
  GetUser ,
  styles ,
  make ,
  
}
/* query Not a pure module */
